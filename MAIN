/*
*@author Andrew Ortiz 
*Professor Carlson
* ICS 340 Assignment 1. 
*
*/


package promptfile;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import javax.swing.JFileChooser;

public class PromptFile {

    public static void main(String[] args) {

        //prompt user for a file
        
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + chooser.getSelectedFile().getAbsolutePath());
        }

        //get file path to read the file
        
        String filePath = chooser.getSelectedFile().getAbsolutePath();
        ArrayList<Integer> list = new ArrayList<>();

        //reading the file
        
        try {
            Scanner s = new Scanner(new File(filePath));

            int i = 0;
            while (s.hasNext()) {
                list.add(s.nextInt());
                System.out.println(list.get(i));
                i++;
            }
            s.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        //sorting values which we get from file
        
        int size = list.size();
        recursiveSort(list, size);

        //sorted list in descending order
        
        System.out.println("\nSorted List");
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }

        //write sorted values to an output file
        
        try {
            FileWriter writer = new FileWriter("D:\\output.txt");
            for (int val : list) {
                writer.write(val + System.lineSeparator());
            }
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }

   public static void recursiveSort(ArrayList list, int n) {
        //base case in regard algorythm complexity. O(n)
        
        if (n == 1) {
            return;
        }
        // Iterates over list "n" times ~ n-1 times / sorts n-1 times.
        //   O(2n) + O(n^2) =  O(n^2) algorithm complexity. 
        
        for (int i = 0; i < list.size() - 1; i++) {
            if (Integer.parseInt(list.get(i).toString()) < Integer.parseInt(list.get(i + 1).toString())) {
                int temp = Integer.parseInt(list.get(i).toString());
                Collections.swap(list, i, (i + 1));
                list.set(i + 1, temp);
            }
        }

        recursiveSort(list, n - 1);

    }
}
